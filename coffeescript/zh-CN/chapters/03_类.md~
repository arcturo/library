<div class="back"><a href="index.html">&laquo; 返回目录</a></div>

#Classes
#类

Classes in JavaScript seem to have the kind of effect that cloves of garlic have to Dracula for some purists; although, let's be honest, if you're that way inclined, you're unlikely to be reading a book on CoffeeScript. However, it turns out that classes are just as damn useful in JavaScript as they are in other languages and CoffeeScript provides a great abstraction. 

JavaScript中的类对于纯粹主义者来说有点像大蒜对Dracula的感觉，诚实点吧，如果你喜欢那样的方式，那你应该不会想读这本关于CoffeeScript的书。可事实是类在JavaScript中就如在其他语言中一样地有用。因此，CoffeeScript为此提供了一个很棒的抽象。

Behind the scenes, CoffeeScript is using JavaScript's native prototype to create classes; adding a bit of syntactic sugar for static property inheritance and context persistence. As a developer all that's exposed to you is the `class` keyword.

在背后，CoffeeScript使用JavaScript原生的原型来产生类，为静态变量继承以及上下文持久化添加了一点语法糖，而暴露给开发者的全部只有一个`class`关键字。

<span class="csscript"></span>

    class Animal
    
In the example above, `Animal` is the name of the class, and also the name of the resultant variable that you can use to create instances. Behind the scenes CoffeeScript is using constructor functions, which means you can instantiate classes using the `new` operator.

在上例中，`Animal`是类的名字，而且也是你可以用来创建实例的合成的变量的名字。CoffeeScript在背后使用了一个构造函数，这意味着你可以使用`new`关键字来实例化变量。

<span class="csscript"></span>

    animal = new Animal

Defining constructors (functions that get invoked upon instantiation) is simple, just use a function named `constructor`. This is akin to using Ruby's `initialize` or Python's `__init__`.

定义构造函数（在实例化前调用的函数）很简单，使用名为`constructor`的函数即可。这与Ruby的`initialize`或者Python的`__init__`类似。

<span class="csscript"></span>

    class Animal
      constructor: (name) ->
        @name = name

In fact, CoffeeScript provides a shorthand for the common pattern of setting instance properties. By prefixing argument's with `@`, CoffeeScript will automatically set the arguments as instance properties in the constructor. Indeed, this shorthand will also work for normal functions outside classes. The example below is equivalent to the last example, where we set the instance properties manually. 

实际上，CoffeeScript为设置实例属性值的常见模式提供了一种简写的方式。如果在参数前加一个`@`，CoffeeScript就会在构造函数中自动地把参数设置为实例的属性。而且，这中简写对于类之外的普通函数同样适用。下面的例子与我们手动设置实例属性的上一例子等价。

<span class="csscript"></span>

    class Animal
      constructor: (@name) ->

As you'd expect, any arguments passed on instantiation are proxied to the constructor function.

如你所愿，每个实例化传入的参数都被代理给了构造函数。

<span class="csscript"></span>

    animal = new Animal("Parrot")
    alert "Animal is a #{animal.name}"

##Instance properties
##实例属性

Adding additional instance properties to a class is very straightforward, it's exactly the syntax as adding properties onto an object. Just make sure properties are indented correctly inside the class body. 

可以非常直接地为类添加实例属性，与为对象添加属性的语法一样。只需要在类体内对属性采用合理的缩进即可。

<span class="csscript"></span>

    class Animal
      price: 5

      sell: (customer) ->
        
    animal = new Animal
    animal.sell(new Customer)

Context changes are rife within JavaScript, and earlier in the Syntax chapter we talked about how CoffeeScript can lock the value of `this` to a particular context using a fat arrow function: `=>`. This ensures that whatever context a function is called under, it'll always execute inside the context it was created in. CoffeeScript has extended support for fat arrows to classes, so by using a fat arrow for an instance method you'll ensure that it's invoked in the correct context, and that `this` is always equal to the current instance. 

在JavaScript中上下文变化很频繁，在上一章*语法*中我们讨论过CoffeeScript如何通过胖箭头函数（`=>`）来让`this`值锁定到某个特定的上下文中。这样无论这个函数在什么上下文中被调用，都保证该函数总是在其创建时的上下文中执行。CoffeeScript把胖箭头语法扩展到类中，因此在实例方法上使用胖箭头你就能确保方法能在正确的上下文中执行——`this`总是等于当前的实例对象。
    
<span class="csscript"></span>

    class Animal
      price: 5

      sell: =>
        alert "Give me #{@price} shillings!"
        
    animal = new Animal
    $("#sell").click(animal.sell)
    
As demonstrated in the example above, this is especially useful in event callbacks. Normally the `sell()` function would be invoked in the context of the `#sell` element. However, by using fat arrows for `sell()`, we're ensuring the correct context is being maintained, and that `this.price` equals `5`.

如上例所示，这在事件回调是尤其有用。正常情况下`sell()`函数会以`#sell`元素为上下文调用。然而，通过使用胖箭头来定义`sell()`，我们能保证能保持正确的上下文，所以`this.price`等于`5`。

##Static properties
##静态变量

How about defining class (i.e. static) properties? Well, it turns out that inside a class definition, `this` refers to the class object. In other words you can set class properties by setting them directly on `this`. 

可以定义类（静态）变量吗？当然，事实证明在类的定义中，`this`引用的就是类。也就是说你可以通过直接在这个`this`上设置类属性。

<span class="csscript"></span>

    class Animal
      this.find = (name) ->      

    Animal.find("Parrot")
    
In fact, as you may remember, CoffeeScript aliases `this` to `@`, which lets you write static properties even more succinctly: 

实际上，如你所知，CoffeeScript使用`@`作为`this`的别名，这能让你更加便捷的定义静态属性：
    
<span class="csscript"></span>

    class Animal
      @find: (name) ->
      
    Animal.find("Parrot")

##Inheritance & Super
##继承与Super

It wouldn't be a proper class implementation without some form of inheritance, and CoffeeScript doesn't disappoint. You can inherit from another class by using the `extends` keyword. In the example below, `Parrot` extends from `Animal`, inheriting all of its instance properties, such as `alive()`

不支持继承不能算是一个完整的类实现。当然CoffeeScript不会让你失望，你可以使用`extends`关键字来使用继承。在下面的例子中，`Parrot`扩展自`Animal`，继承它的实例的所有属性，比方说`alive()`方法。

<span class="csscript"></span>

    class Animal
      constructor: (@name) ->
      
      alive: ->
        false

    class Parrot extends Animal
      constructor: ->
        super("Parrot")
      
      dead: ->
        not @alive()

You'll notice that in the example above, we're using the `super()` keyword. Behind the scenes, this is translated into a function call on the class' parent prototype, invoked in the current context. In this case, it'll be `Parrot.__super__.constructor.call(this, "Parrot");`. In practice, this will have exactly the same effect as invoking `super` in Ruby or Python, invoking the overridden inherited function. 

在上例中，你注意到我们使用了`super()`关键字。在背后这会编译为对父类原型的一次函数调用，不过是以当前为上下文的。在本例中，就相当于`Parrot.__super__.constructor.call(this, "Parrot");`。实际上，这与Ruby或者Python中调用`super`的效果相同——调用被重写了的父类函数。

Unless you override the `constructor`, by default CoffeeScript will invoke the parent's constructor when instances are created. 

除非你重写了`contructor`，默认情况下，在一个实例被创建时CoffeeScript会调用其父类的构造器。

CoffeeScript uses prototypal inheritance to automatically inherit all of a class's instance properties. This ensures that classes are dynamic; even if you add properties to a parent class after a child has been created, the property will still be propagated to all of its inherited children.

CoffeeSript使用原型继承来自动的从类实例上继承所有的属性，这保证了类的动态性。就算你给一个已经被子类继承了的父类添加属性，这些属性仍然可以被其子类继承过来。

<span class="csscript"></span>

    class Animal
      constructor: (@name) ->
      
    class Parrot extends Animal
    
    Animal::rip = true
    
    parrot = new Parrot("Macaw")
    alert("This parrot is no more") if parrot.rip

It's worth pointing out though that static properties are copied to subclasses, rather than inherited using prototype as instance properties are. This is due to implementation details with JavaScript's prototypal architecture, and is a difficult problem to work around.

值得一提的是，静态变量是直接拷贝给子类的，而不是像实例属性那样通过原型来实现。这都是JavaScript原型架构的实现细节所致，而且这是一个比较难解决的问题。

##Mixins
##Mixins

[Mixins](http://en.wikipedia.org/wiki/Mixin) are not something supported natively by CoffeeScript, for the good reason that they can be trivially implemented yourself. For example, here's two functions, `extend()` and `include()` that'll add class and instance properties respectively to a class. 

CoffeeScript并不直接提供对[Mixins](http://en.wikipedia.org/wiki/Mixin)的支持，理由是你自己完全可以很容易的实现。例如，下面有两个函数，`extend()`和`include()`分别会把类属性和实例属性添加到一个类中。

<span class="csscript"></span>

    extend = (obj, mixin) ->
      obj[name] = method for name, method of mixin        
      obj

    include = (klass, mixin) ->
      extend klass.prototype, mixin
    
    # Usage
    include Parrot,
      isDeceased: true
      
    (new Parrot).isDeceased
    
Mixins are a great pattern for sharing common logic between modules when inheritance is not suited. The advantage of mixins, is that you can include multiple ones, compared to inheritance where only one class can be inherited from.

在继承不合适时Mixins是一种不错的在模块间共享通用逻辑的的模式。较之于继承只能实现从单一的父类继承，Mixins的优势是能够实现多个继承。

##Extending classes
##扩展类

Mixins are pretty neat, but they're not very object orientated. Instead, let's integrate mixins into CoffeeScript's classes. We're going to define a class called `Module` that we can inherit from for mixin support. `Module` will have two static functions, `@extend()` and `@include()` which we can use for extending the class with static and instance properties respectively. 

Mixins很棒，只是看起来并不那么地面向对象。让我们把Mixins集成到CoffeeScript的类中吧。我们将会定义一个名为`Module`的类，然后可以继承这个类来获得对Mixins的支持。`Module`会有两个静态方法，`@extend()`和`@include()`，可以用它们来实现对类的静态属性和实例属性的扩展。

<span class="csscript"></span>

    moduleKeywords = ['extended', 'included']

    class Module
      @extend: (obj) ->
        for key, value of obj when key not in moduleKeywords
          @[key] = value

        obj.extended?.apply(@)
        this
        
      @include: (obj) ->
        for key, value of obj when key not in moduleKeywords
          # Assign properties to the prototype
          @::[key] = value

        obj.included?.apply(@)
        this

The little dance around the `moduleKeywords` variable is to ensure we have callback support when mixins extend a class. Let's take a look at our `Module` class in action:

这里有个小技巧，当使用Mixins来扩展一个类时，`moduleKeywords`变量能为我们提供了回调支持。让我们实际看一下`Module`是如何工作的：

<span class="csscript"></span>

    classProperties = 
      find: (id) ->
      create: (attrs) ->
      
    instanceProperties =
      save: -> 

    class User extends Module
      @extend classProperties
      @include instanceProperties
    
    # Usage:
    user = User.find(1)
    
    user = new User
    user.save()
    
As you can see, we've added some static properties, `find()` and `create()` to the `User` class, as well as some instance properties, `save()`. 

如你所见，我们为`User`类添加了`find()`和`create()`静态属性，还添加了`save()`实例属性。

Since we've got callbacks whenever modules are extended, we can shortcut the process of applying both static and instance properties:

既然在扩展模块后我们还可以使用回调函数，于是可以快捷地处理类属性和实例属性。

<span class="csscript"></span>

    ORM = 
      find: (id) ->
      create: (attrs) ->
      extended: ->
        @include
          save: -> 

    class User extends Module
      @extend ORM

Super simple and elegant!
